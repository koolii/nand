// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).
    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    PARTS:
    // Put your code here:
    // 1[15] 1 1 a c1 c2 c3 c4 c5[7] c6 d1 d2 d3 j1 j2 j3[0]

    // 夫々0か1を取る
    // もしもC命令を実行するなら、instCが1になり、instAが0になるし、その逆も然り
    And(a=instruction[15], b=true, out=instC);
    Not(in=instC, out=instA);

    // instAが0の時に、A命令(命令をAレジスタに挿入)、1ならC命令の制御ビットになる
    // TODO ここは後で移動させる、なぜならoALUがこの時点で定義されていないから
    Mux16(a=instruction, b=oALU, sel=instA, out=inARegister);

    // loadビットは現状の値を保持か新規値を代入するかのどちらか
    // A命令の時にAレジスタに値を設定すれば良いので、instAをloadビットに割当れば
    // inRegisterの中身は必然的にinstructionになるから正しいはず
    // DRegisterの所にも書いたが、d1ビットはAレジスタに値を確保するかどうかを
    // 判定するとのこと=>一旦d1(instruction[5])に変更
    // 頭から15ビット分はaddressMへの定数として使われる(A命令の時15ビットが定数として使われると言う部分が適合する)
    ARegister(in=inARegister, load=instruction[5], out=oARegister, out[0..14]=addressM);

    // PCゲートのinはOARegisterになるのは設計図に書いてあるからそのまま
    // loadビットにはgotoの様にジャンプするかどうかの判定結果が入り
    // incにはそのままでインクリメントするかどうかが設定される

    // ALUに渡す値を決定(A/M)
    // 設計図にはaビットでAレジスタかメモリ入力か判定出来るとある(P103)
    // => だからinstructionのaビットに該当する部分を設定する(aビットが何をしているのかは4章を確認すること)
    Mux16(a=inM, b=oARegister, sel=instruction[11] out=oAorM);

    // dビットがALUの結果をレジスタに書き込むかどうかを指定
    // なのでdビットはDRegisterのloadビットとして使う(ただ、dビットは3ビットある)
    // P72を見たところ、d1,d2,d3の組み合わせの内、Dレジスタに値を設定するかどうかはd2ビットが1なのかどうかで判定している
    // また、d1に関しては1担っていると、Aレジスタに値を設定するということもわかった()
    // 先にoDRegisterを定義しておかないとALUゲート時にエラーが出るから移動させる
    // instruction[4] == d2ビット
    DRegister(in=oALU, load=instruction[4], out=oDRegister);

    // P70のdest領域がどうやって分布するかを見ればd3がMemoryに格納するかどうかを判定するということが分かる
    // instruction[3] == d3ビット
    And(a=instC, b=instruction[3], out=writeM);


    // ALU本体
    // P103を確認する
    // cビットがALUがどの関数を実行するのか
    // 一応だけど、aビットが0の時は算術計算にAを用いて、1の時にはMの値を使う(Mux16でやってる内容)
    // ALUの制御ビット(P36)とcompビット(P71)を見比べると下記のように分かった
    // (zx, nx, zy, ny, f, no) == (c1, c2, c3, c4, c5, c6)
    // 後は、ALUで言う所のx/yにどっちを割り当てるのかを正しくできれば良さそう
    // zx, zero the x input?
    // nx, negate the x input?
    // zy, zero the y input?
    // ny, negate the y input?
    // f,  compute out = x + y (if 1) or x & y (if 0)
    // no; negate the out output?
    ALU(x=oDRegister, y=oAorM
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6],
        out=oALU, zr=oZR, ng=oNG);
    // TODO P35を参照して、夫々の出力値を確認しているが、これで何を判定するかが分からない
    // そもそものALUの入力値になるM・Aはなんだっけと言うところから始める
    // Mはメモリに実際に設定されている値で、Aがメモリを指定するためのアドレス
    // 最終的にALUのアウトプットは全ての計算のアウトプットになるのでM+AとかD+1とか。あとはJMPの計算をする条件分岐等を行なう?
    // zr: out=0の場合のみtrue(16ビットの等号比較) JMPの比較とかに使える？
    // ng: out<0の場合のみtrue(16ビットの負判定)

    // JEQ
    And(a=oZR, b=instruction[1], out=jeq);
    And(a=oNR, b=instruction[0], out=jne);

    // loadビットにどうやって値を積めるかだが、`0;JMP`みたいなのがあったようにAレジスタに値が入ってて、
    // その値を比較して合致していればJMPする仕組みになっている。だからそこを計算してあげる必要がある？？
    // P103には命令のジャンプビットまたはALUから発信される２つの制御ビットに寄って決定されると記載があるがzr,ngは何者？
    PC(in=oARegister, load=load, inc=inc, reset=reset, out=incrementOrReset);
}
