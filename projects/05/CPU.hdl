// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).
    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    PARTS:
    // Put your code here:
    // 1[15] 1 1 a c1 c2 c3 c4 c5[7] c6 d1 d2 d3 j1 j2 j3[0]

    // 夫々0か1を取る
    // もしもC命令を実行するなら、instCが1になり、instAが0になるし、その逆も然り
    Not(in=instruction[15], out=instA);
    Not(in=instA, out=instC);

    // instAが0の時に、A命令(命令をAレジスタに挿入)、1ならC命令の制御ビットになる
    // => ココはinstCが正しいっぽい(テストが進んだから) 値の代入は0、計算は1になる => instC(instAは逆)
    // => Mux.hdlに書いているようにsel==0ならaになる(instCとかで悩むのがめんどいのでinstruction[15]をそのまま指定)
    Mux16(a=instruction, b=oALU, sel=instC, out=inARegister);

    // (P72)表を確認するとd1ビットはAレジスタに値を格納するという命令になる
    // (P91)命令は現在の命令の中に含まれているかもしれない(=>instruction)し、１つ前の命令の実行結果に依存するかもしれない(=>oALU)
    // (P93)アドレス命令を実行すれば、コンピュータは15ビットの値をAレジスタに格納する
    // (P94)アドレス命令であれば、命令に埋め込まれた15ビットの定数値がAレジスタに格納される
    // これらのことからA(アドレス)命令とC命令でd1が1の場合に値を格納するということになる
    Or(a=instA, b=instruction[5], out=loadARegister);

    // loadビットは現状の値を保持か新規値を代入するかのどちらか
    // 頭から15ビット分はaddressMへの定数として使われる(A命令の時15ビットが定数として使われると言う部分が適合する)
    ARegister(in=inARegister, load=loadARegister, out=oARegister, out[0..14]=addressM);

    // ALUに渡す値を決定(A/M)
    // (P103)aビットがAレジスタから値を取得するのかMからなのかを決定するとある
    // (P71)表を確認し、a=0ならA,a=1ならDから値を取得する
    Mux16(a=oARegister, b=inM, sel=instruction[12], out=oAorM);

    // ALU本体
    // Mはメモリに実際に設定されている値で、Aがメモリを指定するためのアドレス
    // (P103)cビットがALUにどの関数を実行するのかを作用させる
    // (A/M)aビット(instruction[12])が0の時は算術計算にAを用いて、1の時にはMの値を使う
    // (P36/P71)ALUの制御ビットとcompビットを見比べると下記のように分かった
    //   (zx, nx, zy, ny, f, no) == (c1, c2, c3, c4, c5, c6)
    // [input]
    // zx: zero the x input?
    // nx: negate the x input?
    // zy: zero the y input?
    // ny: negate the y input?
    // f:  compute out = x + y (if 1) or x & y (if 0)
    // no: negate the out output?
    // [output]
    // zr: out=0の場合のみtrue(16ビットの等号比較) JMPの比較とかに使える？
    // ng: out<0の場合のみtrue(16ビットの負判定)
    // 最終的にALUのアウトプットは全ての計算のアウトプットになるのでM+AとかD+1とか。あとはJMPの計算をする条件分岐等を行なう?
    ALU(x=oDRegister, y=oAorM,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6],
        out=oALU, out=outM, zr=zero, ng=negative);

    // DRegister
    // (P103)dビットがALUの結果をレジスタに書き込むかどうかを指定(dビットは合計3ビット存在する)
    // (P72)d1,d2,d3の組み合わせの内、Dレジスタに値を設定するかどうかはd2ビットが1なのかどうかで判定している
    // instruction[4] == d2ビット
    // C命令の時にそれぞれの命令が有効になるので、instCであることを保証するためにAndゲートを通す
    And(a=instC, b=instruction[4], out=loadDRegister);
    DRegister(in=oALU, load=loadDRegister, out=oDRegister);

    // writeM
    // (P70)dest領域がどうやって分布するかを見ればd3がMemoryに格納するかどうかを判定するということが分かる
    // instruction[3] == d3ビット
    And(a=instC, b=instruction[3], out=writeM);

    // out<0の反対はout>=0で0も含まれているから、等号を外す
    Not(in=negative, out=positiveWithZero);
    Not(in=zero, out=notZero);
    And(a=positiveWithZero, b=notZero, out=positive);

    // 最初は夫々のニーモニックを作成し、全てをOr条件で結ぼうと考えていたが、
    // 単純に下記のようにoutがどのようなものなのか分かりきっているので、
    // jX毎にjump条件を満たす条件を考えて上げて、夫々をOr条件で結んで上げるだけで良い
    // * negativeは計算結果が(out<0)であるということを示している
    // * zeroは計算結果が(out==0)であるということを示している
    // * positiveは計算結果が(out>0)であるということを示している
    // あとはそれぞれがtrueになるようなパターンを作成する
    // というよりも、j1,j2,j3の内、少なくとも1つでも1ならjumpすると分かる事に気づけると楽

    // j1が1であり、out<0ならjump
    And(a=instruction[2], b=negative, out=j1);
    // j2が1であり、out=0ならjump
    And(a=instruction[1], b=zero, out=j2);
    // j3が1であり、out>0ならjump
    And(a=instruction[0], b=positive, out=j3);

    Or(a=j1, b=j2, out=j12);
    Or(a=j12, b=j3, out=jump123);

    // C命令であることを最後に確認
    And(a=instC, b=jump123, out=jump);

    // PC
    // incがtrueになるのは優先度が reset > load > inc > preOut
    // 今回はpreOutに行く必要がないから最下のincは必ずtrueになる
    PC(in=oARegister, load=jump, reset=reset, inc=true, out[0..14]=pc);
}
